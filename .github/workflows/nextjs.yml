# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to raspi

on:
  schedule:
    - cron: "0 8 * * 0"   #
  workflow_run:
    workflows: ["Playwright Tests"]
    branches: [main]
    types: 
      - completed
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: 'frontend/'
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/frontend/package-lock.json', '**/frontend/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/frontend/package-lock.json', '**/frontend/yarn.lock') }}-
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      - name: Build with Next.js
        run: |
          cd frontend
          npx --no-install next build
      - name: Install zip
        uses: montudor/action-zip@v1
      - name: Zip output
        run: zip -qq -r piweather-latest.zip *
        working-directory: frontend/out/
      - name: Get next version
        uses: reecetech/version-increment@2024.4.3
        id: version
        with:
          scheme: semver
          increment: patch
      - name: Upload release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "frontend/out/piweather-latest.zip"
          tags: "piweather:${{ steps.version.outputs.version }}"
          commit: ${{ github.ref }}

  
